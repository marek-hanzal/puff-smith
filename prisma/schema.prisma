generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next Auth Stuff

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  files         File[]
  jobs          Job[]
  Transaction   Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Leight Core Stuff

model Translation {
  id       String @id @default(cuid())
  language String @db.VarChar(32)
  label    String @db.Text
  text     String @db.Text
  hash     String @db.VarChar(128)

  @@unique([language, hash])
}

model File {
  id       String    @id @default(cuid())
  path     String
  name     String
  mime     String
  size     Int
  location String
  ttl      Int?
  created  DateTime
  updated  DateTime?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String    @id @default(cuid())
  name         String
  status       JobStatus @default(NEW)
  total        Int       @default(0)
  progress     Decimal   @default(0) @db.Decimal(5, 2)
  success      Int?
  successRatio Decimal?  @db.Decimal(5, 2)
  failure      Int?
  failureRatio Decimal?  @db.Decimal(5, 2)
  skip         Int?
  skipRatio    Decimal?  @db.Decimal(5, 2)
  created      DateTime
  logs         JobLog[]
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  params       String?
}

model JobLog {
  id      String @id @default(cuid())
  jobId   String
  job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  message String @db.Text
}

enum JobStatus {
  // Just created, nobody cares about the job yet
  NEW
  // Job has been picked up and is in progress.
  RUNNING
  // Job has been successfully done; waiting for "commit".
  SUCCESS
  // Job has failed hard (usually outside of boundaris of the job handler)
  FAILURE
  //  Job has been processed, but there are some failed items
  REVIEW
  //  When everything is OK, it's done: goes from review->done and failure->done
  DONE
}

// Puff Smith Stuff

model Tag {
  id       String     @id @default(cuid())
  code     String
  label    String?
  group    String
  sort     Int?
  Atomizer Atomizer[]

  AtomizerDraw AtomizerDraw[]
  @@unique([code, group])
}

model Vendor {
  id        String     @id @default(cuid())
  name      String     @unique
  atomizers Atomizer[]
}

model Atomizer {
  id           String         @id @default(cuid())
  name         String
  vendorId     String
  vendor       Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  typeId       String
  type         Tag            @relation(fields: [typeId], references: [id], onDelete: Cascade)
  coilMin      Decimal?       @db.Decimal(3, 2)
  coilMax      Decimal?       @db.Decimal(3, 2)
  dualCoil     Boolean        @default(false)
  squonk       Boolean        @default(false)
  AtomizerDraw AtomizerDraw[]
  cost         Decimal?       @db.Decimal(5, 2)

  @@unique([name, vendorId])
}

model AtomizerDraw {
  id         String   @id @default(cuid())
  atomizerId String
  atomizer   Atomizer @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  drawId     String
  draw       Tag      @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

model Transaction {
  id      String   @id @default(cuid())
  amount  Decimal  @db.Decimal(10, 2)
  created DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  note    String?
}
