generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next Auth Stuff

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  files               File[]
  jobs                Job[]
  Transaction         Transaction[]
  AtomizerTransaction AtomizerTransaction[]
  ModTransaction      ModTransaction[]
  CellTransaction     CellTransaction[]
  CottonTransaction   CottonTransaction[]
  Comment             Comment[]
  UserToken           UserToken[]
  VoucherTransaction  VoucherTransaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Leight Core Stuff

model Token {
  id    String    @id @default(cuid())
  name  String    @unique
  until DateTime?

  UserToken UserToken[]
}

model UserToken {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenId String
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([userId, tokenId])
}

model Translation {
  id       String @id @default(cuid())
  language String @db.VarChar(32)
  label    String @db.Text
  text     String @db.Text
  hash     String @db.VarChar(128)

  @@unique([language, hash])
}

model File {
  id       String    @id @default(cuid())
  path     String
  name     String
  mime     String
  size     Int
  location String
  ttl      Int?
  created  DateTime
  updated  DateTime?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String    @id @default(cuid())
  name         String
  status       JobStatus @default(NEW)
  total        Int       @default(0)
  progress     Decimal   @default(0) @db.Decimal(5, 2)
  success      Int?
  successRatio Decimal?  @db.Decimal(5, 2)
  failure      Int?
  failureRatio Decimal?  @db.Decimal(5, 2)
  skip         Int?
  skipRatio    Decimal?  @db.Decimal(5, 2)
  created      DateTime
  logs         JobLog[]
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  params       String?
}

model JobLog {
  id      String @id @default(cuid())
  jobId   String
  job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  message String @db.Text
}

enum JobStatus {
  // Just created, nobody cares about the job yet
  NEW
  // Job has been picked up and is in progress.
  RUNNING
  // Job has been successfully done; waiting for "commit".
  SUCCESS
  // Job has failed hard (usually outside of boundaris of the job handler)
  FAILURE
  //  Job has been processed, but there are some failed items
  REVIEW
  //  When everything is OK, it's done: goes from review->done and failure->done
  DONE
}

// Puff Smith Stuff

model Comment {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment String   @db.Text
  created DateTime
  public  Boolean  @default(false)

  AtomizerComment AtomizerComment[]
  CellComment     CellComment[]
  ModComment      ModComment[]
  CottonComment   CottonComment[]
}

model Tag {
  id    String  @id @default(cuid())
  code  String
  label String?
  group String
  sort  Int?

  Atomizer     Atomizer[]
  AtomizerDraw AtomizerDraw[]
  Cell         Cell[]

  @@unique([code, group])
}

model Vendor {
  id        String     @id @default(cuid())
  name      String     @unique
  atomizers Atomizer[]
  Cell      Cell[]
  Mod       Mod[]
  Cotton    Cotton[]
}

model Atomizer {
  id           String         @id @default(cuid())
  name         String
  vendorId     String
  vendor       Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  typeId       String
  type         Tag            @relation(fields: [typeId], references: [id], onDelete: Cascade)
  coilMin      Decimal?       @db.Decimal(3, 2)
  coilMax      Decimal?       @db.Decimal(3, 2)
  dualCoil     Boolean        @default(false)
  squonk       Boolean        @default(false)
  AtomizerDraw AtomizerDraw[]
  cost         Decimal?       @db.Decimal(5, 2)

  AtomizerTransaction AtomizerTransaction[]
  AtomizerComment     AtomizerComment[]

  @@unique([name, vendorId])
}

model AtomizerDraw {
  id         String   @id @default(cuid())
  atomizerId String
  atomizer   Atomizer @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  drawId     String
  draw       Tag      @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

model AtomizerComment {
  id         String   @id @default(cuid())
  atomizerId String
  atomizer   Atomizer @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  commentId  String
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Transaction {
  id      String   @id @default(cuid())
  amount  Decimal  @db.Decimal(10, 2)
  created DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  note    String?

  AtomizerTransaction AtomizerTransaction[]
  ModTransaction      ModTransaction[]
  CellTransaction     CellTransaction[]
  CottonTransaction   CottonTransaction[]
  VoucherTransaction  VoucherTransaction[]
}

model AtomizerTransaction {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  atomizerId    String
  atomizer      Atomizer    @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Cell {
  id       String   @id @default(cuid())
  name     String
  voltage  Decimal  @db.Decimal(10, 2)
  drain    Decimal? @db.Decimal(10, 2)
  ohm      Decimal? @db.Decimal(10, 2)
  cost     Decimal  @db.Decimal(10, 2)
  typeId   String
  type     Tag      @relation(fields: [typeId], references: [id], onDelete: Cascade)
  vendorId String
  vendor   Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  ModCell         ModCell[]
  CellTransaction CellTransaction[]
  CellComment     CellComment[]

  @@unique([name, vendorId])
}

model CellTransaction {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cellId        String
  cell          Cell        @relation(fields: [cellId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model CellComment {
  id        String  @id @default(cuid())
  cellId    String
  cell      Cell    @relation(fields: [cellId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Mod {
  id       String  @id @default(cuid())
  name     String
  vendorId String
  vendor   Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  cost     Decimal @db.Decimal(10, 2)
  voltage  Decimal @db.Decimal(10, 2)
  power    Decimal @db.Decimal(10, 2)

  ModCell        ModCell[]
  ModTransaction ModTransaction[]
  ModComment     ModComment[]

  @@unique([name, vendorId])
}

model ModCell {
  id     String @id @default(cuid())
  modId  String
  mod    Mod    @relation(fields: [modId], references: [id], onDelete: Cascade)
  cellId String
  cell   Cell   @relation(fields: [cellId], references: [id], onDelete: Cascade)
}

model ModTransaction {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  modId         String
  mod           Mod         @relation(fields: [modId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model ModComment {
  id        String  @id @default(cuid())
  modId     String
  mod       Mod     @relation(fields: [modId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Cotton {
  id                String              @id @default(cuid())
  name              String
  vendorId          String
  vendor            Vendor              @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  cost              Decimal             @db.Decimal(10, 2)
  CottonTransaction CottonTransaction[]
  CottonComment     CottonComment[]

  @@unique([name, vendorId])
}

model CottonTransaction {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cottonId      String
  cotton        Cotton      @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model CottonComment {
  id        String  @id @default(cuid())
  cottonId  String
  cotton    Cotton  @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Voucher {
  id         String   @id @default(cuid())
  name       String   @unique
  cost       Decimal  @db.Decimal(10, 2)
  maxFortune Decimal? @db.Decimal(10, 2)

  VoucherTransaction VoucherTransaction[]
}

model VoucherTransaction {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucherId     String
  voucher       Voucher     @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}
