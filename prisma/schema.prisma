generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model Translation {
	id			String	@id @db.Uuid @default(uuid())
	language	String	@db.VarChar(32)
	label       String	@db.Text
	text		String	@db.Text
	hash        String	@db.VarChar(128)

	@@unique([language, hash])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//model user {
//	id              String            @id @default(uuid())
//	name            String            @db.VarChar(256)
//	email           String            @unique() @db.VarChar(256)
//	password        String?           @db.VarChar(256)
//	site            String            @db.VarChar(32)
//	settings        Json?
//}

//model atomizer {
//  id                 String               @id @db.VarChar(36)
//  name               String               @db.VarChar(128)
//  vendor_id          String               @db.VarChar(36)
//  type_id            String?              @db.VarChar(36)
//  coilMin            Decimal?             @db.Decimal(3, 2)
//  coilMax            Decimal?             @db.Decimal(3, 2)
//  dual               Boolean              @default(false)
//  tag              tag?               @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atomizer_ibfk_2")
//  vendor           vendor             @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atomizer_ibfk_1")
//  atomizer_comment atomizer_comment[]
//  atomizer_tag     atomizer_tag[]
//  build            build[]
//  user_atomizer    user_atomizer[]
//
//  @@unique([name, vendor_id], map: "atomizer_name_unique")
//  @@index([type_id], map: "type_id")
//  @@index([vendor_id], map: "vendor_id")
//}
//
//model atomizer_comment {
//  id          String     @id @db.VarChar(36)
//  atomizer_id String     @db.VarChar(36)
//  comment_id  String     @db.VarChar(36)
//  atomizer  atomizer @relation(fields: [atomizer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atomizer_comment_ibfk_1")
//  comment   comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atomizer_comment_ibfk_2")
//
//  @@index([atomizer_id], map: "atomizer_id")
//  @@index([comment_id], map: "comment_id")
//}
//
//model atomizer_tag {
//  id          String     @id @db.VarChar(36)
//  atomizer_id String     @db.VarChar(36)
//  tag_id      String     @db.VarChar(36)
//  atomizer  atomizer @relation(fields: [atomizer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atomizer_tag_ibfk_1")
//  tag       tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "atomizer_tag_ibfk_2")
//
//  @@index([atomizer_id], map: "atomizer_id")
//  @@index([tag_id], map: "tag_id")
//}
//
//model base {
//  id        String      @id @db.VarChar(36)
//  name      String      @db.VarChar(128)
//  pg        Int
//  vg        Int
//  vendor_id String      @db.VarChar(36)
//  vendor  vendor    @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "base_ibfk_1")
//  mixture mixture[]
//
//  @@index([vendor_id], map: "vendor_id")
//}
//
//model booster {
//  id        String      @id @db.VarChar(36)
//  name      String      @db.VarChar(128)
//  pg        Int
//  vg        Int
//  nicotine  Int
//  volume    Int
//  vendor_id String      @db.VarChar(36)
//  vendor  vendor    @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "booster_ibfk_1")
//  mixture mixture[]
//
//  @@index([vendor_id], map: "vendor_id")
//}
//
//model build {
//  id              String            @id @db.VarChar(36)
//  atomizer_id     String            @db.VarChar(36)
//  coil_id         String            @db.VarChar(36)
//  cotton_id       String            @db.VarChar(36)
//  user_id         String            @db.VarChar(36)
//  active          Boolean           @default(true)
//  created         DateTime          @db.DateTime(0)
//  disabledOn      DateTime?         @db.DateTime(0)
//  ohm             Decimal?          @db.Decimal(10, 3)
//  driptip_id      String?           @db.VarChar(36)
//  mod_id          String?           @db.VarChar(36)
//  dual            Boolean           @default(false)
//  dualMode        Int?
//  atomizer      atomizer        @relation(fields: [atomizer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_ibfk_1")
//  coil          coil            @relation(fields: [coil_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_ibfk_2")
//  cotton        cotton          @relation(fields: [cotton_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_ibfk_3")
//  driptip       driptip?        @relation(fields: [driptip_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_ibfk_5")
//  mod           mod?            @relation(fields: [mod_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_ibfk_6")
//  user          user            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_ibfk_4")
//  build_comment build_comment[]
//  build_tag     build_tag[]
//  vape          vape[]
//
//  @@index([atomizer_id], map: "atomizer_id")
//  @@index([coil_id], map: "coil_id")
//  @@index([cotton_id], map: "cotton_id")
//  @@index([driptip_id], map: "driptip_id")
//  @@index([mod_id], map: "mod_id")
//  @@index([user_id], map: "user_id")
//}
//
//model build_comment {
//  id         String    @id @db.VarChar(36)
//  build_id   String    @db.VarChar(36)
//  comment_id String    @db.VarChar(36)
//  build    build   @relation(fields: [build_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_comment_ibfk_1")
//  comment  comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_comment_ibfk_2")
//
//  @@index([build_id], map: "build_id")
//  @@index([comment_id], map: "comment_id")
//}
//
//model build_tag {
//  id       String  @id @db.VarChar(36)
//  build_id String  @db.VarChar(36)
//  tag_id   String  @db.VarChar(36)
//  build  build @relation(fields: [build_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_tag_ibfk_1")
//  tag    tag   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "build_tag_ibfk_2")
//
//  @@index([build_id], map: "build_id")
//  @@index([tag_id], map: "tag_id")
//}
//
//model cache {
//  id    String    @id @db.VarChar(36)
//  key   String    @unique(map: "cache_key_unique") @db.VarChar(128)
//  value Bytes?    @db.MediumBlob
//  hash  String?   @db.VarChar(512)
//  ttl   DateTime? @db.DateTime(0)
//}
//
//model cell {
//  id          String        @id @db.VarChar(36)
//  name        String        @db.VarChar(64)
//  drain       Int
//  voltage     Decimal       @default(3.7) @db.Decimal(10, 1)
//  ohm         Decimal       @db.Decimal(10, 3)
//  vendor_id   String        @db.VarChar(36)
//  type_id     String        @db.VarChar(36)
//  tag       tag         @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cell_ibfk_2")
//  vendor    vendor      @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cell_ibfk_1")
//  user_cell user_cell[]
//
//  @@unique([name, vendor_id], map: "cell_name_unique")
//  @@index([type_id], map: "type_id")
//  @@index([vendor_id], map: "vendor_id")
//}
//
//model coil {
//  id         String    @id @db.VarChar(36)
//  wraps      Int
//  wire_id    String    @db.VarChar(36)
//  stamp      DateTime  @db.DateTime(0)
//  size       Decimal   @default(0.30) @db.Decimal(10, 2)
//  spaced     Boolean   @default(false)
//  ohm        Decimal?  @db.Decimal(3, 2)
//  nominalOhm Decimal?  @db.Decimal(4, 3)
//  wire     wire    @relation(fields: [wire_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coil_ibfk_1")
//  build    build[]
//
//  @@unique([wraps, size, wire_id], map: "coil_coil_unique")
//  @@index([wire_id], map: "wire_id")
//}
//
//model comment {
//  id                 String               @id @db.VarChar(36)
//  user_id            String               @db.VarChar(36)
//  stamp              DateTime             @db.DateTime(0)
//  comment            String               @db.Text
//  user             user               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comment_ibfk_1")
//  atomizer_comment atomizer_comment[]
//  build_comment    build_comment[]
//  comment_tag      comment_tag[]
//  liquid_comment   liquid_comment[]
//  mixture_comment  mixture_comment[]
//  vape_comment     vape_comment[]
//
//  @@index([user_id], map: "user_id")
//}
//
//model comment_tag {
//  id         String    @id @db.VarChar(36)
//  comment_id String    @db.VarChar(36)
//  tag_id     String    @db.VarChar(36)
//  comment  comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comment_tag_ibfk_1")
//  tag      tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comment_tag_ibfk_2")
//
//  @@index([comment_id], map: "comment_id")
//  @@index([tag_id], map: "tag_id")
//}
//
//model config {
//  id    String  @id @db.VarChar(36)
//  key   String  @unique(map: "config_key_unique") @db.VarChar(256)
//  value String? @db.Text
//}
//
//model cotton {
//  id          String    @id @db.VarChar(36)
//  name        String    @unique(map: "cotton_name_unique") @db.VarChar(128)
//  description String?   @db.VarChar(512)
//  vendor_id   String    @db.VarChar(36)
//  vendor    vendor  @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cotton_ibfk_1")
//  build     build[]
//
//  @@index([vendor_id], map: "vendor_id")
//}
//
//model driptip {
//  id              String            @id @db.VarChar(36)
//  name            String            @db.VarChar(256)
//  user_id         String            @db.VarChar(36)
//  vendor_id       String            @db.VarChar(36)
//  user          user            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "driptip_ibfk_1")
//  vendor        vendor          @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "driptip_ibfk_2")
//  build         build[]
//  user_atomizer user_atomizer[]
//  vape          vape[]
//
//  @@unique([name, user_id], map: "driptip_code_unique")
//  @@index([user_id], map: "user_id")
//  @@index([vendor_id], map: "vendor_id")
//}
//
//model file {
//  id                                  String    @id @db.VarChar(36)
//  path                                String    @db.VarChar(256)
//  name                                String    @db.VarChar(256)
//  mime                                String    @default("application/octet-stream") @db.VarChar(256)
//  size                                BigInt
//  created                             DateTime  @db.DateTime(0)
//  updated                             DateTime? @db.DateTime(0)
//  ttl                                 Float?
//  native                              String    @db.VarChar(2048)
//  native_hash                         String    @unique(map: "file_native_unique") @db.VarChar(128)
//  user_id                             String?   @db.VarChar(36)
//  user                              user?   @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "file_ibfk_1")
//  image_fileToimage_original_id image[] @relation("fileToimage_original_id")
//  image_fileToimage_preview_id  image[] @relation("fileToimage_preview_id")
//
//  @@unique([path, name], map: "file_name_unique")
//  @@index([user_id], map: "user_id")
//}
//
//model image {
//  id                                 String   @id @db.VarChar(36)
//  gallery                            String?  @db.VarChar(128)
//  user_id                            String   @db.VarChar(36)
//  preview_id                         String   @db.VarChar(36)
//  original_id                        String   @db.VarChar(36)
//  stamp                              DateTime @db.DateTime(0)
//  file_fileToimage_original_id file   @relation("fileToimage_original_id", fields: [original_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "image_ibfk_3")
//  file_fileToimage_preview_id  file   @relation("fileToimage_preview_id", fields: [preview_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "image_ibfk_2")
//  user                             user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "image_ibfk_1")
//
//  @@index([original_id], map: "original_id")
//  @@index([preview_id], map: "preview_id")
//  @@index([user_id], map: "user_id")
//}
//
//model job {
//  id          String       @id @db.VarChar(36)
//  service     String       @db.VarChar(256)
//  params      String?      @db.Text
//  result      String?      @db.Text
//  total       Int          @default(0)
//  success     Int          @default(0)
//  error       Int          @default(0)
//  progress    Float        @default(0)
//  runtime     Float        @default(0)
//  performance Float        @default(0)
//  status      Int
//  created     DateTime     @db.DateTime(0)
//  done        DateTime?    @db.DateTime(0)
//  user_id     String?      @db.VarChar(36)
//  commit      Boolean      @default(false)
//  user      user?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_ibfk_1")
//  job_lock  job_lock[]
//  job_log   job_log[]
//
//  @@index([user_id], map: "user_id")
//}
//
//model job_lock {
//  id     String  @id @db.VarChar(36)
//  job_id String  @db.VarChar(36)
//  name   String  @db.VarChar(128)
//  active Boolean
//  stamp  Float
//  job  job   @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_lock_ibfk_1")
//
//  @@index([job_id], map: "job_id")
//}
//
//model job_log {
//  id        String  @id @db.VarChar(36)
//  job_id    String  @db.VarChar(36)
//  type      String? @db.VarChar(128)
//  level     Int
//  item      String? @db.Text
//  reference String? @db.VarChar(512)
//  message   String  @db.Text
//  stamp     Float
//  job     job   @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "job_log_ibfk_1")
//
//  @@index([job_id], map: "job_id")
//}
//
//model liquid {
//  id               String             @id @db.VarChar(36)
//  name             String             @db.VarChar(128)
//  description      String?            @db.VarChar(512)
//  pg               Int
//  vg               Int
//  volume           Int
//  vendor_id        String             @db.VarChar(36)
//  vendor         vendor           @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "liquid_ibfk_1")
//  liquid_comment liquid_comment[]
//  mixture        mixture[]
//
//  @@unique([name, vendor_id], map: "liquid_name_unique")
//  @@index([vendor_id], map: "vendor_id")
//}
//
//model liquid_comment {
//  id         String    @id @db.VarChar(36)
//  liquid_id  String    @db.VarChar(36)
//  comment_id String    @db.VarChar(36)
//  comment  comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "liquid_comment_ibfk_2")
//  liquid   liquid  @relation(fields: [liquid_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "liquid_comment_ibfk_1")
//
//  @@index([comment_id], map: "comment_id")
//  @@index([liquid_id], map: "liquid_id")
//}
//
//model log {
//  id        String   @id @db.VarChar(36)
//  type      String   @db.VarChar(24)
//  log       String   @db.Text
//  stack     String?  @db.Text
//  tags      String?  @db.VarChar(256)
//  stamp     DateTime @db.DateTime(0)
//  trace     String   @db.VarChar(128)
//  reference String?  @db.VarChar(128)
//  microtime Float
//  context   String?  @db.Text
//  user_id   String?  @db.VarChar(36)
//  user    user?  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "log_ibfk_1")
//
//  @@index([user_id], map: "user_id")
//}
//
//model mixture {
//  id                String              @id @db.VarChar(36)
//  code              String              @db.VarChar(64)
//  steep             Int?
//  pg                Int
//  vg                Int
//  nicotine          Int
//  volume            Int
//  mixed             DateTime            @db.DateTime(0)
//  expires           DateTime?           @db.Date
//  liquid_id         String              @db.VarChar(36)
//  booster_id        String?             @db.VarChar(36)
//  base_id           String?             @db.VarChar(36)
//  user_id           String              @db.VarChar(36)
//  active            Boolean             @default(true)
//  base            base?             @relation(fields: [base_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mixture_ibfk_3")
//  booster         booster?          @relation(fields: [booster_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mixture_ibfk_2")
//  liquid          liquid            @relation(fields: [liquid_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mixture_ibfk_1")
//  user            user              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mixture_ibfk_4")
//  mixture_comment mixture_comment[]
//  vape            vape[]
//
//  @@unique([code, user_id], map: "mixture_code_unique")
//  @@index([base_id], map: "base_id")
//  @@index([booster_id], map: "booster_id")
//  @@index([liquid_id], map: "liquid_id")
//  @@index([user_id], map: "user_id")
//}
//
//model mixture_comment {
//  id         String    @id @db.VarChar(36)
//  mixture_id String    @db.VarChar(36)
//  comment_id String    @db.VarChar(36)
//  comment  comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mixture_comment_ibfk_2")
//  mixture  mixture @relation(fields: [mixture_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mixture_comment_ibfk_1")
//
//  @@index([comment_id], map: "comment_id")
//  @@index([mixture_id], map: "mixture_id")
//}
//
//model mod {
//  id        String      @id @db.VarChar(36)
//  name      String      @db.VarChar(128)
//  power     Int?
//  vendor_id String      @db.VarChar(36)
//  voltage   Decimal?    @db.Decimal(10, 1)
//  vendor  vendor    @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mod_ibfk_1")
//  build   build[]
//  mod_tag mod_tag[]
//  vape    vape[]
//
//  @@unique([name, vendor_id], map: "mod_name_unique")
//  @@index([vendor_id], map: "vendor_id")
//}
//
//model mod_tag {
//  id     String @id @db.VarChar(36)
//  mod_id String @db.VarChar(36)
//  tag_id String @db.VarChar(36)
//  mod  mod  @relation(fields: [mod_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mod_tag_ibfk_1")
//  tag  tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mod_tag_ibfk_2")
//
//  @@index([mod_id], map: "mod_id")
//  @@index([tag_id], map: "tag_id")
//}
//
//model profiler {
//  id      String @id @db.VarChar(36)
//  stamp   Float
//  name    String @db.VarChar(1024)
//  runtime Float
//}
//
//model tag {
//  id             String           @id @db.VarChar(36)
//  code           String           @db.VarChar(128)
//  label          String           @db.VarChar(128)
//  group          String?          @db.VarChar(128)
//  sort           Int              @default(0)
//  atomizer     atomizer[]
//  atomizer_tag atomizer_tag[]
//  build_tag    build_tag[]
//  cell         cell[]
//  comment_tag  comment_tag[]
//  mod_tag      mod_tag[]
//  wire_tag     wire_tag[]
//
//  @@unique([code, group], map: "tag_code_unique")
//}
//
//model user_atomizer {
//  id          String     @id @db.VarChar(36)
//  stamp       DateTime   @db.DateTime(0)
//  driptip_id  String?    @db.VarChar(36)
//  atomizer_id String     @db.VarChar(36)
//  user_id     String     @db.VarChar(36)
//  atomizer  atomizer @relation(fields: [atomizer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_atomizer_ibfk_2")
//  driptip   driptip? @relation(fields: [driptip_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_atomizer_ibfk_1")
//  user      user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_atomizer_ibfk_3")
//
//  @@index([atomizer_id], map: "atomizer_id")
//  @@index([driptip_id], map: "driptip_id")
//  @@index([user_id], map: "user_id")
//}
//
//model user_cell {
//  id      String   @id @db.VarChar(36)
//  code    String?  @db.VarChar(128)
//  stamp   DateTime @db.Date
//  cell_id String   @db.VarChar(36)
//  user_id String   @db.VarChar(36)
//  cell  cell   @relation(fields: [cell_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_cell_ibfk_1")
//  user  user   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_cell_ibfk_2")
//
//  @@unique([code, user_id], map: "user_cell_code_unique")
//  @@index([cell_id], map: "cell_id")
//  @@index([user_id], map: "user_id")
//}
//
//model vape {
//  id             String           @id @db.VarChar(36)
//  mixture_id     String           @db.VarChar(36)
//  driptip_id     String?          @db.VarChar(36)
//  rating         Int?
//  fruits         Int?
//  tobacco        Int?
//  cakes          Int?
//  complex        Int?
//  fresh          Int?
//  power          Decimal?         @db.Decimal(10, 2)
//  tc             Int?
//  stamp          DateTime         @db.DateTime(0)
//  user_id        String           @db.VarChar(36)
//  throathit      Int?
//  build_id       String           @db.VarChar(36)
//  mod_id         String           @db.VarChar(36)
//  build        build          @relation(fields: [build_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vape_ibfk_5")
//  driptip      driptip?       @relation(fields: [driptip_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vape_ibfk_3")
//  mixture      mixture        @relation(fields: [mixture_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vape_ibfk_2")
//  mod          mod            @relation(fields: [mod_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vape_ibfk_6")
//  user         user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vape_ibfk_4")
//  vape_comment vape_comment[]
//
//  @@index([build_id], map: "build_id")
//  @@index([driptip_id], map: "driptip_id")
//  @@index([mixture_id], map: "mixture_id")
//  @@index([mod_id], map: "mod_id")
//  @@index([user_id], map: "user_id")
//}
//
//model vape_comment {
//  id         String    @id @db.VarChar(36)
//  vape_id    String    @db.VarChar(36)
//  comment_id String    @db.VarChar(36)
//  comment  comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vape_comment_ibfk_2")
//  vape     vape    @relation(fields: [vape_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vape_comment_ibfk_1")
//
//  @@index([comment_id], map: "comment_id")
//  @@index([vape_id], map: "vape_id")
//}
//
//model vendor {
//  id         String       @id @db.VarChar(36)
//  name       String       @unique(map: "vendor_name_unique") @db.VarChar(128)
//  atomizer atomizer[]
//  base     base[]
//  booster  booster[]
//  cell     cell[]
//  cotton   cotton[]
//  driptip  driptip[]
//  liquid   liquid[]
//  mod      mod[]
//  wire     wire[]
//}
//
//model wire {
//  id          String       @id @db.VarChar(36)
//  name        String       @db.VarChar(256)
//  description String?      @db.VarChar(512)
//  ga          Int?
//  vendor_id   String       @db.VarChar(36)
//  tc          Boolean      @default(false)
//  vendor    vendor     @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wire_ibfk_1")
//  coil      coil[]
//  wire_tag  wire_tag[]
//
//  @@unique([vendor_id, name, ga], map: "wire_name_unique")
//}
//
//model wire_tag {
//  id      String @id @db.VarChar(36)
//  wire_id String @db.VarChar(36)
//  tag_id  String @db.VarChar(36)
//  tag   tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wire_tag_ibfk_2")
//  wire  wire @relation(fields: [wire_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wire_tag_ibfk_1")
//
//  @@index([tag_id], map: "tag_id")
//  @@index([wire_id], map: "wire_id")
//}
