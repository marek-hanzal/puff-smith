generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next Auth Stuff

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  tariffId      String?
  tariff        Tariff?   @relation(fields: [tariffId], references: [id])

  accounts          Account[]
  files             File[]
  jobs              Job[]
  Transaction       Transaction[]
  Comment           Comment[]
  UserToken         UserToken[]
  Liquid            Liquid[]
  Metric            Metric[]
  Build             Build[]
  AtomizerInventory AtomizerInventory[]
  CellInventory     CellInventory[]
  ModInventory      ModInventory[]
  CottonInventory   CottonInventory[]
  VoucherInventory  VoucherInventory[]
  AromaInventory    AromaInventory[]
  BoosterInventory  BoosterInventory[]
  BaseInventory     BaseInventory[]
  WireInventory     WireInventory[]
  MixtureInventory  MixtureInventory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Leight Core Stuff

model Token {
  id    String    @id @default(cuid())
  name  String    @unique
  until DateTime?

  UserToken UserToken[]
}

model UserToken {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenId String
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([userId, tokenId])
}

model Translation {
  id       String @id @default(cuid())
  language String @db.VarChar(32)
  label    String @db.Text
  text     String @db.Text
  hash     String @db.VarChar(128)

  @@unique([language, hash])
}

model File {
  id       String    @id @default(cuid())
  path     String
  name     String
  mime     String
  size     Int
  location String
  ttl      Int?
  created  DateTime
  updated  DateTime?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String    @id @default(cuid())
  name         String
  status       JobStatus @default(NEW)
  total        Int       @default(0)
  progress     Decimal   @default(0) @db.Decimal(5, 2)
  success      Int?
  successRatio Decimal?  @db.Decimal(5, 2)
  failure      Int?
  failureRatio Decimal?  @db.Decimal(5, 2)
  skip         Int?
  skipRatio    Decimal?  @db.Decimal(5, 2)
  created      DateTime
  started      DateTime?
  finished     DateTime?
  logs         JobLog[]
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  params       String?
}

model JobLog {
  id      String @id @default(cuid())
  jobId   String
  job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  message String @db.Text
}

enum JobStatus {
  // Just created, nobody cares about the job yet
  NEW
  // Job has been picked up and is in progress.
  RUNNING
  // Job has been successfully done; waiting for "commit".
  SUCCESS
  // Job has failed hard (usually outside of boundaris of the job handler)
  FAILURE
  //  Job has been processed, but there are some failed items
  REVIEW
  //  When everything is OK, it's done: goes from review->done and failure->done
  DONE
}

model Metric {
  id        String   @id @default(cuid())
  reference String
  name      String
  start     Decimal? @db.Decimal(10, 2)
  value     Decimal  @db.Decimal(10, 2)
  label     String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Puff Smith Stuff

model Comment {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment String   @db.Text
  created DateTime
  public  Boolean  @default(false)

  AtomizerComment AtomizerComment[]
  CellComment     CellComment[]
  ModComment      ModComment[]
  CottonComment   CottonComment[]
  AromaComment    AromaComment[]
}

model Tag {
  id    String  @id @default(cuid())
  code  String
  label String?
  group String
  sort  Int?

  Atomizer     Atomizer[]
  AtomizerDraw AtomizerDraw[]
  CottonDraw   CottonDraw[]
  Cell         Cell[]
  ModCell      ModCell[]
  AromaTaste   AromaTaste[]
  Fiber        Fiber[]
  CoilDraw     CoilDraw[]
  WireDraw     WireDraw[]
  MixtureDraw  MixtureDraw[]

  @@unique([code, group])
}

model Vendor {
  id               String             @id @default(cuid())
  name             String             @unique
  atomizers        Atomizer[]
  Cell             Cell[]
  Mod              Mod[]
  Cotton           Cotton[]
  Aroma            Aroma[]
  Booster          Booster[]
  Base             Base[]
  Wire             Wire[]
  Mixture          Mixture[]
  MixtureInventory MixtureInventory[]
  Liquid           Liquid[]
}

model Tariff {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  description String?
  from        DateTime?
  to          DateTime?
  created     DateTime

  Price Price[]
  User  User[]
}

model Price {
  id       String    @id @default(cuid())
  name     String
  price    Decimal   @db.Decimal(10, 2)
  tariffId String
  tariff   Tariff    @relation(fields: [tariffId], references: [id])
  from     DateTime?
  to       DateTime?
  created  DateTime

  Transaction Transaction[]
}

model Transaction {
  id      String   @id @default(cuid())
  amount  Decimal  @db.Decimal(10, 2)
  created DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  priceId String?
  price   Price?   @relation(fields: [priceId], references: [id])
  note    String?

  AtomizerInventory AtomizerInventory[]
  ModInventory      ModInventory[]
  CellInventory     CellInventory[]
  CottonInventory   CottonInventory[]
  VoucherInventory  VoucherInventory[]
  AromaInventory    AromaInventory[]
  BoosterInventory  BoosterInventory[]
  BaseInventory     BaseInventory[]
  Liquid            Liquid[]
  WireInventory     WireInventory[]
  MixtureInventory  MixtureInventory[]
}

model Atomizer {
  id           String         @id @default(cuid())
  name         String
  vendorId     String
  vendor       Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  typeId       String
  type         Tag            @relation(fields: [typeId], references: [id], onDelete: Cascade)
  coilMin      Decimal?       @db.Decimal(3, 2)
  coilMax      Decimal?       @db.Decimal(3, 2)
  dualCoil     Boolean        @default(false)
  squonk       Boolean        @default(false)
  AtomizerDraw AtomizerDraw[]
  cost         Decimal?       @db.Decimal(5, 2)

  AtomizerInventory AtomizerInventory[]
  AtomizerComment   AtomizerComment[]

  @@unique([name, vendorId])
}

model AtomizerDraw {
  id         String   @id @default(cuid())
  atomizerId String
  atomizer   Atomizer @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  drawId     String
  draw       Tag      @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

model AtomizerComment {
  id         String   @id @default(cuid())
  atomizerId String
  atomizer   Atomizer @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  commentId  String
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model AtomizerInventory {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  atomizerId    String
  atomizer      Atomizer    @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model Cell {
  id       String   @id @default(cuid())
  name     String
  voltage  Decimal  @db.Decimal(10, 2)
  drain    Decimal? @db.Decimal(10, 2)
  ohm      Decimal? @db.Decimal(10, 2)
  cost     Decimal  @db.Decimal(10, 2)
  typeId   String
  type     Tag      @relation(fields: [typeId], references: [id], onDelete: Cascade)
  vendorId String
  vendor   Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  CellInventory CellInventory[]
  CellComment   CellComment[]

  @@unique([name, vendorId])
}

model CellInventory {
  id            String      @id @default(cuid())
  code          String      @unique
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cellId        String
  cell          Cell        @relation(fields: [cellId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model CellComment {
  id        String  @id @default(cuid())
  cellId    String
  cell      Cell    @relation(fields: [cellId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Mod {
  id       String  @id @default(cuid())
  name     String
  vendorId String
  vendor   Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  cost     Decimal @db.Decimal(10, 2)
  voltage  Decimal @db.Decimal(10, 2)
  power    Decimal @db.Decimal(10, 2)

  ModCell      ModCell[]
  ModInventory ModInventory[]
  ModComment   ModComment[]

  @@unique([name, vendorId])
}

model ModCell {
  id     String @id @default(cuid())
  modId  String
  mod    Mod    @relation(fields: [modId], references: [id], onDelete: Cascade)
  cellId String
  cell   Tag    @relation(fields: [cellId], references: [id], onDelete: Cascade)
}

model ModInventory {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  modId         String
  mod           Mod         @relation(fields: [modId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model ModComment {
  id        String  @id @default(cuid())
  modId     String
  mod       Mod     @relation(fields: [modId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Cotton {
  id              String            @id @default(cuid())
  name            String
  vendorId        String
  vendor          Vendor            @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  cost            Decimal           @db.Decimal(10, 2)
  CottonInventory CottonInventory[]
  CottonComment   CottonComment[]
  CottonDraw      CottonDraw[]

  @@unique([name, vendorId])
}

model CottonDraw {
  id       String @id @default(cuid())
  cottonId String
  cotton   Cotton @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  drawId   String
  draw     Tag    @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

model CottonInventory {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cottonId      String
  cotton        Cotton      @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model CottonComment {
  id        String  @id @default(cuid())
  cottonId  String
  cotton    Cotton  @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Voucher {
  id         String   @id @default(cuid())
  name       String   @unique
  cost       Decimal  @db.Decimal(10, 2)
  maxFortune Decimal? @db.Decimal(10, 2)

  VoucherInventory VoucherInventory[]
}

model VoucherInventory {
  id            String      @id @default(cuid())
  code          String      @unique
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucherId     String
  voucher       Voucher     @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model Aroma {
  id       String   @id @default(cuid())
  name     String
  cost     Decimal  @db.Decimal(10, 2)
  content  Decimal  @db.Decimal(10, 2)
  volume   Decimal? @db.Decimal(10, 2)
  pg       Decimal  @db.Decimal(10, 2)
  vg       Decimal  @db.Decimal(10, 2)
  vendorId String
  vendor   Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  steep    Int      @default(14)

  AromaInventory   AromaInventory[]
  AromaComment     AromaComment[]
  AromaTaste       AromaTaste[]
  Mixture          Mixture[]
  MixtureInventory MixtureInventory[]
  Liquid           Liquid[]

  @@unique([name, vendorId])
}

model AromaTaste {
  id      String @id @default(cuid())
  aromaId String
  aroma   Aroma  @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  tasteId String
  taste   Tag    @relation(fields: [tasteId], references: [id], onDelete: Cascade)
}

model AromaComment {
  id        String  @id @default(cuid())
  aromaId   String
  aroma     Aroma   @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model AromaInventory {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  aromaId       String
  aroma         Aroma       @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model Booster {
  id       String  @id @default(cuid())
  name     String
  cost     Decimal @db.Decimal(10, 2)
  volume   Decimal @db.Decimal(10, 2)
  nicotine Decimal @db.Decimal(10, 2)
  pg       Decimal @db.Decimal(10, 2)
  vg       Decimal @db.Decimal(10, 2)
  vendorId String
  vendor   Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  BoosterInventory BoosterInventory[]
  Mixture          Mixture[]
  MixtureInventory MixtureInventory[]
  Liquid           Liquid[]

  @@unique([name, vendorId])
}

model BoosterInventory {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  boosterId     String
  booster       Booster     @relation(fields: [boosterId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model Base {
  id       String  @id @default(cuid())
  name     String
  cost     Decimal @db.Decimal(10, 2)
  pg       Decimal @db.Decimal(10, 2)
  vg       Decimal @db.Decimal(10, 2)
  vendorId String
  vendor   Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  BaseInventory    BaseInventory[]
  Mixture          Mixture[]
  MixtureInventory MixtureInventory[]
  Liquid           Liquid[]

  @@unique([name, vendorId])
}

model BaseInventory {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  baseId        String
  base          Base        @relation(fields: [baseId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model Liquid {
  id            String      @id @default(cuid())
  code          String      @unique
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  mixtureId     String
  mixture       Mixture     @relation(fields: [mixtureId], references: [id], onDelete: Cascade)
  aromaId       String
  aroma         Aroma       @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  vendorId      String
  vendor        Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  boosterId     String?
  booster       Booster?    @relation(fields: [boosterId], references: [id], onDelete: Cascade)
  baseId        String?
  base          Base?       @relation(fields: [baseId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  created       DateTime
  mixed         DateTime

  @@index([userId, aromaId, vendorId, boosterId, baseId], type: Brin)
}

model Mixture {
  id              String        @id @default(cuid())
  // application based unique hash; main goal is a simple ability to update mixtures based on this hash
  hash            String        @unique
  // total size of a bottle
  volume          Decimal       @db.Decimal(10, 2)
  // amount of liquid in a bottle
  content         Decimal       @db.Decimal(10, 2)
  // amount of available space to be filled
  available       Decimal       @db.Decimal(10, 2)
  // volume - content => amount of extra or missing liquid
  diff            Decimal       @db.Decimal(10, 2)
  // amount of nicotine (mg/ml)
  nicotine        Decimal       @db.Decimal(10, 2)
  nicotineToRound Int
  // vg/pg ratio
  vg              Decimal       @db.Decimal(10, 2)
  pg              Decimal       @db.Decimal(10, 2)
  // vg/pg in ml
  vgToMl          Decimal       @db.Decimal(10, 2)
  // rounded VG ratio (for example 70 instead of 76)
  vgToRound       Int
  pgToMl          Decimal       @db.Decimal(10, 2)
  // rounded PG ratio (for example 70 instead of 76)
  pgToRound       Int
  aromaId         String
  aroma           Aroma         @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  // vendor of an aroma
  vendorId        String
  vendor          Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  boosterId       String?
  booster         Booster?      @relation(fields: [boosterId], references: [id], onDelete: Cascade)
  boosterCount    Int
  baseId          String?
  base            Base?         @relation(fields: [baseId], references: [id], onDelete: Cascade)
  baseMl          Decimal       @db.Decimal(10, 2)
  error           MixtureError?

  MixtureInventory MixtureInventory[]
  Liquid           Liquid[]
  MixtureDraw      MixtureDraw[]

  @@index([aromaId, boosterId, baseId, nicotineToRound, vgToRound, pgToRound], type: Brin)
}

model MixtureDraw {
  id        String  @id @default(cuid())
  mixtureId String
  mixture   Mixture @relation(fields: [mixtureId], references: [id], onDelete: Cascade)
  drawId    String
  draw      Tag     @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

model MixtureInventory {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  mixtureId     String
  mixture       Mixture     @relation(fields: [mixtureId], references: [id], onDelete: Cascade)
  aromaId       String
  aroma         Aroma       @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  vendorId      String
  vendor        Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  boosterId     String?
  booster       Booster?    @relation(fields: [boosterId], references: [id], onDelete: Cascade)
  baseId        String?
  base          Base?       @relation(fields: [baseId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId, aromaId, vendorId, boosterId, baseId], type: Brin)
}

enum MixtureError {
  LESS
  MORE
  FULL
}

model Build {
  id      String   @id @default(cuid())
  created DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

// One of heating types for atomizer
model Coil {
  id     String  @id @default(cuid())
  // Name could (and probably should be) based on size + wraps + wire.name or something similar
  name   String
  code   String  @unique
  // Size of a coil wrap, usually something like 0.2, 0.25 and so on
  size   Decimal @db.Decimal(10, 2)
  wraps  Int
  wireId String
  wire   Wire    @relation(fields: [wireId], references: [id], onDelete: Cascade)

  CoilDraw CoilDraw[]

  @@unique([name, wireId])
}

model CoilDraw {
  id     String @id @default(cuid())
  coilId String
  coil   Coil   @relation(fields: [coilId], references: [id], onDelete: Cascade)
  drawId String
  draw   Tag    @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

// Wire is a source for a coil
model Wire {
  id        String  @id @default(cuid())
  name      String
  code      String  @unique
  cost      Decimal @db.Decimal(10, 2)
  // Is this wire TCR compatible?
  isTCR     Boolean
  // Expected thickness of a wire - sum of individual fibers; this could help to identify if a wire would fit in a post in atomizer
  mm        Decimal @db.Decimal(10, 2)
  mmToRound Decimal @db.Decimal(10, 2)
  vendorId  String
  vendor    Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  WireFiber     WireFiber[]
  Coil          Coil[]
  WireDraw      WireDraw[]
  WireInventory WireInventory[]

  @@unique([name, vendorId])
}

model WireInventory {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  wireId        String
  wire          Wire        @relation(fields: [wireId], references: [id], onDelete: Cascade)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId], type: Brin)
}

model WireDraw {
  id     String @id @default(cuid())
  wireId String
  wire   Wire   @relation(fields: [wireId], references: [id], onDelete: Cascade)
  drawId String
  draw   Tag    @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

// Wire should be constructed of some fibers (logically at least one fiber should be in a wire)
model WireFiber {
  id      String @id @default(cuid())
  count   Int
  wireId  String
  wire    Wire   @relation(fields: [wireId], references: [id], onDelete: Cascade)
  fiberId String
  fiber   Fiber  @relation(fields: [fiberId], references: [id], onDelete: Cascade)
}

// Fiber is a base for a wire; the wire could be made of several fibers (like claptons or so)
model Fiber {
  id         String  @id @default(cuid())
  code       String  @unique
  // Thickness of a fiber in mm (for example 0.3 or something; should be rounded)
  mm         Decimal @db.Decimal(10, 2)
  // Thickness of a fiber
  ga         Int
  materialId String
  material   Tag     @relation(fields: [materialId], references: [id], onDelete: Cascade)

  WireFiber WireFiber[]

  @@unique([ga, materialId])
}
