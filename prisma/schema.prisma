generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next Auth Stuff

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  tariffId      String?
  tariff        Tariff?   @relation(fields: [tariffId], references: [id])

  accounts                       Account[]
  files                          File[]
  jobs                           Job[]
  Transaction                    Transaction[]
  Comment                        Comment[]
  UserToken                      UserToken[]
  Liquid                         Liquid[]
  AtomizerInventory              AtomizerInventory[]
  CellInventory                  CellInventory[]
  ModInventory                   ModInventory[]
  CottonInventory                CottonInventory[]
  VoucherInventory               VoucherInventory[]
  AromaInventory                 AromaInventory[]
  WireInventory                  WireInventory[]
  Atomizer                       Atomizer[]
  Cell                           Cell[]
  Mod                            Mod[]
  Cotton                         Cotton[]
  Aroma                          Aroma[]
  Coil                           Coil[]
  Wire                           Wire[]
  Fiber                          Fiber[]
  UserCertificate                UserCertificate[]
  UserLicense                    UserLicense[]
  Wishlist                       Wishlist[]
  UserCertificateRequestUser     UserCertificateRequest[] @relation("UserCertificateRequestUser")
  UserCertificateRequestApprover UserCertificateRequest[] @relation("UserCertificateRequestApprover")
  UserLicenseRequestUser         UserLicenseRequest[]     @relation("UserLicenseRequestUser")
  UserLicenseRequestApprover     UserLicenseRequest[]     @relation("UserLicenseRequestApprover")
  Vendor                         Vendor[]
  CellHealth                     CellHealth[]
  CommentRating                  CommentRating[]
  BuildAtomizer                  BuildAtomizer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Leight Core Stuff

model Token {
  id   String @id @default(cuid())
  name String @unique

  UserToken        UserToken[]
  CertificateToken CertificateToken[]
  LicenseToken     LicenseToken[]
}

model UserToken {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenId String
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([userId, tokenId])
}

model Translation {
  id       String @id @default(cuid())
  language String @db.VarChar(32)
  label    String @db.Text
  text     String @db.Text
  hash     String @db.VarChar(128)

  @@unique([language, hash])
}

model Keyword {
  id   String @id @default(cuid())
  text String @unique @db.Text

  AromaKeyword AromaKeyword[]
  TagKeyword   TagKeyword[]
}

model File {
  id       String    @id @default(cuid())
  path     String
  name     String
  mime     String
  size     Int
  location String
  ttl      Int?
  created  DateTime
  updated  DateTime?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String    @id @default(cuid())
  name         String
  status       JobStatus @default(NEW)
  total        Int       @default(0)
  progress     Float     @default(0)
  success      Int
  successRatio Float
  failure      Int
  failureRatio Float
  skip         Int
  skipRatio    Float
  created      DateTime
  started      DateTime?
  finished     DateTime?
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  params       String?

  logs JobLog[]
}

model JobLog {
  id      String @id @default(cuid())
  jobId   String
  job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  message String @db.Text
}

enum JobStatus {
  // Just created, nobody cares about the job yet
  NEW
  // Job has been picked up and is in progress.
  RUNNING
  // Job has been successfully done; waiting for "commit".
  SUCCESS
  // Job has failed hard (usually outside of boundaris of the job handler)
  FAILURE
  //  Job has been processed, but there are some failed items
  REVIEW
  //  When everything is OK, it's done: goes from review->done and failure->done
  DONE
}

// Puff Smith Stuff

model Comment {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment String   @db.Text
  created DateTime

  CommentRating            CommentRating[]
  AtomizerComment          AtomizerComment[]
  CellComment              CellComment[]
  ModComment               ModComment[]
  CottonComment            CottonComment[]
  AromaComment             AromaComment[]
  AromaInventoryComment    AromaInventoryComment[]
  AtomizerInventoryComment AtomizerInventoryComment[]
  CellInventoryComment     CellInventoryComment[]
  ModInventoryComment      ModInventoryComment[]
  CottonInventoryComment   CottonInventoryComment[]
  BuildAtomizerComment     BuildAtomizerComment[]
}

model CommentRating {
  id        String  @id @default(cuid())
  rating    Int
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Tag {
  id    String @id @default(cuid())
  tag   String
  group String
  sort  Int?

  Atomizer               Atomizer[]
  AtomizerDraw           AtomizerDraw[]
  CottonDraw             CottonDraw[]
  Cell                   Cell[]
  ModCell                ModCell[]
  AromaTaste             AromaTaste[]
  Fiber                  Fiber[]
  CoilDraw               CoilDraw[]
  WireDraw               WireDraw[]
  BuildLiquidTasteRating BuildLiquidTasteRating[]
  WishlistTag            WishlistTag[]
  TagKeyword             TagKeyword[]

  @@unique([tag, group])
}

model TagKeyword {
  id        String  @id @default(cuid())
  tagId     String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  keywordId String
  keyword   Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
}

model Vendor {
  id     String  @id @default(cuid())
  name   String  @unique
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  atomizers Atomizer[]
  Cell      Cell[]
  Mod       Mod[]
  Cotton    Cotton[]
  Aroma     Aroma[]
  Wire      Wire[]
  Liquid    Liquid[]
}

model Tariff {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  description String?
  from        DateTime?
  to          DateTime?
  created     DateTime

  Price Price[]
  User  User[]
}

model Price {
  id       String   @id @default(cuid())
  name     String
  price    Decimal  @db.Decimal(10, 2)
  tariffId String
  tariff   Tariff   @relation(fields: [tariffId], references: [id])
  created  DateTime

  Transaction Transaction[]
}

model Transaction {
  id      String   @id @default(cuid())
  amount  Decimal  @db.Decimal(10, 2)
  created DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  priceId String?
  price   Price?   @relation(fields: [priceId], references: [id])
  note    String?

  BuildAtomizer BuildAtomizer[]
}

model Atomizer {
  id       String   @id @default(cuid())
  name     String
  code     String   @unique
  vendorId String
  vendor   Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  typeId   String
  type     Tag      @relation(fields: [typeId], references: [id], onDelete: Cascade)
  coilMin  Decimal? @db.Decimal(3, 2)
  coilMax  Decimal? @db.Decimal(3, 2)
  wrapsMin Int?
  wrapsMax Int?
  dualCoil Boolean  @default(false)
  squonk   Boolean  @default(false)
  isHybrid Boolean  @default(false)
  userId   String?
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  AtomizerInventory AtomizerInventory[]
  AtomizerComment   AtomizerComment[]
  AtomizerDraw      AtomizerDraw[]
  BuildAtomizer     BuildAtomizer[]

  @@unique([name, vendorId])
}

model AtomizerDraw {
  id         String   @id @default(cuid())
  atomizerId String
  atomizer   Atomizer @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  drawId     String
  draw       Tag      @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

model AtomizerComment {
  id         String   @id @default(cuid())
  atomizerId String
  atomizer   Atomizer @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  commentId  String
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model AtomizerInventory {
  id         String   @id @default(cuid())
  code       String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  atomizerId String
  atomizer   Atomizer @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  rating     Int?

  AtomizerInventoryComment AtomizerInventoryComment[]
}

model AtomizerInventoryComment {
  id                  String            @id @default(cuid())
  atomizerInventoryId String
  atomizerInventory   AtomizerInventory @relation(fields: [atomizerInventoryId], references: [id], onDelete: Cascade)
  commentId           String
  comment             Comment           @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Cell {
  id         String  @id @default(cuid())
  name       String
  code       String  @unique
  voltage    Float
  voltageMax Float?
  drain      Float?
  ohm        Float?
  capacity   Int?
  typeId     String
  type       Tag     @relation(fields: [typeId], references: [id], onDelete: Cascade)
  vendorId   String
  vendor     Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  CellInventory CellInventory[]
  CellComment   CellComment[]
  CellHealth    CellHealth[]

  @@unique([name, vendorId])
}

model CellComment {
  id        String  @id @default(cuid())
  cellId    String
  cell      Cell    @relation(fields: [cellId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model CellInventory {
  id     String @id @default(cuid())
  code   String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cellId String
  cell   Cell   @relation(fields: [cellId], references: [id], onDelete: Cascade)
  rating Int?

  CellHealth           CellHealth[]
  CellInventoryComment CellInventoryComment[]
}

model CellHealth {
  id              String        @id @default(cuid())
  cellId          String
  cell            Cell          @relation(fields: [cellId], references: [id], onDelete: Cascade)
  cellInventoryId String
  cellInventory   CellInventory @relation(fields: [cellInventoryId], references: [id], onDelete: Cascade)
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  capacity        Int?
  capacityRatio   Float?
  voltage         Float?
  voltageRatio    Float?
  // health is a combination of capacity and voltage percentage
  health          Float?
  created         DateTime
}

model CellInventoryComment {
  id              String        @id @default(cuid())
  cellInventoryId String
  cellInventory   CellInventory @relation(fields: [cellInventoryId], references: [id], onDelete: Cascade)
  commentId       String
  comment         Comment       @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Mod {
  id       String  @id @default(cuid())
  name     String
  code     String  @unique
  vendorId String
  vendor   Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  voltage  Float
  power    Float
  userId   String?
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ModCell      ModCell[]
  ModInventory ModInventory[]
  ModComment   ModComment[]

  @@unique([name, vendorId])
}

model ModComment {
  id        String  @id @default(cuid())
  modId     String
  mod       Mod     @relation(fields: [modId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model ModCell {
  id     String @id @default(cuid())
  modId  String
  mod    Mod    @relation(fields: [modId], references: [id], onDelete: Cascade)
  cellId String
  cell   Tag    @relation(fields: [cellId], references: [id], onDelete: Cascade)
}

model ModInventory {
  id     String @id @default(cuid())
  code   String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  modId  String
  mod    Mod    @relation(fields: [modId], references: [id], onDelete: Cascade)
  rating Int?

  ModInventoryComment ModInventoryComment[]
}

model ModInventoryComment {
  id             String       @id @default(cuid())
  modInventoryId String
  modInventory   ModInventory @relation(fields: [modInventoryId], references: [id], onDelete: Cascade)
  commentId      String
  comment        Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Cotton {
  id       String  @id @default(cuid())
  name     String
  code     String  @unique
  vendorId String
  vendor   Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  userId   String?
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  CottonInventory CottonInventory[]
  CottonComment   CottonComment[]
  CottonDraw      CottonDraw[]
  Build           Build[]

  @@unique([name, vendorId])
}

model CottonComment {
  id        String  @id @default(cuid())
  cottonId  String
  cotton    Cotton  @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model CottonDraw {
  id       String @id @default(cuid())
  cottonId String
  cotton   Cotton @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  drawId   String
  draW     Tag    @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

model CottonInventory {
  id       String @id @default(cuid())
  code     String @unique
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cottonId String
  cotton   Cotton @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  rating   Int?

  CottonInventoryComment CottonInventoryComment[]
}

model CottonInventoryComment {
  id                String          @id @default(cuid())
  cottonInventoryId String
  cottonInventory   CottonInventory @relation(fields: [cottonInventoryId], references: [id], onDelete: Cascade)
  commentId         String
  comment           Comment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Voucher {
  id         String @id @default(cuid())
  name       String @unique
  premium    Float
  maxFortune Float?

  VoucherInventory VoucherInventory[]
}

model VoucherInventory {
  id        String  @id @default(cuid())
  code      String  @unique
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucherId String
  voucher   Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade)
}

model Aroma {
  id       String  @id @default(cuid())
  name     String
  code     String  @unique
  content  Int
  volume   Int
  pg       Int
  vg       Int
  vendorId String
  vendor   Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  steep    Int
  userId   String?
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  AromaInventory AromaInventory[]
  AromaComment   AromaComment[]
  AromaTaste     AromaTaste[]
  Liquid         Liquid[]
  AromaKeyword   AromaKeyword[]

  @@unique([name, vendorId])
}

model AromaKeyword {
  id        String  @id @default(cuid())
  aromaId   String
  aroma     Aroma   @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  keywordId String
  keyword   Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
}

model AromaTaste {
  id      String @id @default(cuid())
  aromaId String
  aroma   Aroma  @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  tasteId String
  taste   Tag    @relation(fields: [tasteId], references: [id], onDelete: Cascade)
}

model AromaComment {
  id        String  @id @default(cuid())
  aromaId   String
  aroma     Aroma   @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model AromaInventory {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  code    String @unique
  aromaId String
  aroma   Aroma  @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  rating  Int?

  AromaInventoryComment AromaInventoryComment[]

  @@unique([userId, aromaId])
}

model AromaInventoryComment {
  id               String         @id @default(cuid())
  aromaInventoryId String
  aromaInventory   AromaInventory @relation(fields: [aromaInventoryId], references: [id], onDelete: Cascade)
  commentId        String
  comment          Comment        @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Liquid {
  id       String   @id @default(cuid())
  code     String   @unique
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  aromaId  String
  aroma    Aroma    @relation(fields: [aromaId], references: [id], onDelete: Cascade)
  vendorId String
  vendor   Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  created  DateTime
  mixed    DateTime
  rating   Int?

  BuildLiquidRating      BuildLiquidRating[]
  BuildLiquidTasteRating BuildLiquidTasteRating[]
}

model Build {
  id       String   @id @default(cuid())
  code     String   @unique
  created  DateTime
  coilId   String
  coil     Coil     @relation(fields: [coilId], references: [id], onDelete: Cascade)
  cottonId String
  cotton   Cotton   @relation(fields: [cottonId], references: [id], onDelete: Cascade)
  ohm      Decimal  @db.Decimal(5, 3)
  drain    Float
  watts    Float

  BuildAtomizer          BuildAtomizer[]
  BuildLiquidRating      BuildLiquidRating[]
  BuildLiquidTasteRating BuildLiquidTasteRating[]
}

model BuildAtomizer {
  id            String      @id @default(cuid())
  buildId       String
  build         Build       @relation(fields: [buildId], references: [id], onDelete: Cascade)
  atomizerId    String
  atomizer      Atomizer    @relation(fields: [atomizerId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating        Int?
  active        Boolean     @default(true)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  BuildAtomizerComment BuildAtomizerComment[]
}

model BuildAtomizerComment {
  id              String        @id @default(cuid())
  buildAtomizerId String
  buildAtomizer   BuildAtomizer @relation(fields: [buildAtomizerId], references: [id], onDelete: Cascade)
  commentId       String
  comment         Comment       @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model BuildLiquidTasteRating {
  id       String   @id @default(cuid())
  buildId  String
  build    Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  liquidId String
  liquid   Liquid   @relation(fields: [liquidId], references: [id], onDelete: Cascade)
  tasteId  String
  taste    Tag      @relation(fields: [tasteId], references: [id], onDelete: Cascade)
  created  DateTime
  rating   Int?

  @@unique([buildId, liquidId, tasteId])
}

model BuildLiquidRating {
  id       String   @id @default(cuid())
  buildId  String
  build    Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  liquidId String
  liquid   Liquid   @relation(fields: [liquidId], references: [id], onDelete: Cascade)
  created  DateTime
  rating   Int?

  @@unique([buildId, liquidId])
}

// One of heating types for atomizer
model Coil {
  id     String  @id @default(cuid())
  // Name could (and probably should be) based on size + wraps + wire.name or something similar
  name   String
  code   String  @unique
  // Size of a coil wrap, usually something like 0.2, 0.25 and so on
  size   Decimal @db.Decimal(3, 2)
  wraps  Int
  wireId String
  wire   Wire    @relation(fields: [wireId], references: [id], onDelete: Cascade)
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  CoilDraw CoilDraw[]
  Build    Build[]

  @@unique([name, wireId])
}

model CoilDraw {
  id     String @id @default(cuid())
  coilId String
  coil   Coil   @relation(fields: [coilId], references: [id], onDelete: Cascade)
  drawId String
  draw   Tag    @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

// Wire is a source for a coil
model Wire {
  id        String  @id @default(cuid())
  name      String
  code      String  @unique
  // Is this wire TCR compatible?
  isTCR     Boolean
  // Expected thickness of a wire - sum of individual fibers; this could help to identify if a wire would fit in a post in atomizer
  mm        Float
  mmToRound Float
  vendorId  String
  vendor    Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  WireFiber     WireFiber[]
  Coil          Coil[]
  WireDraw      WireDraw[]
  WireInventory WireInventory[]

  @@unique([name, vendorId])
}

model WireInventory {
  id     String @id @default(cuid())
  code   String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  wireId String
  wire   Wire   @relation(fields: [wireId], references: [id], onDelete: Cascade)
  rating Int?

  @@unique([userId, wireId])
}

model WireDraw {
  id     String @id @default(cuid())
  wireId String
  wire   Wire   @relation(fields: [wireId], references: [id], onDelete: Cascade)
  drawId String
  draw   Tag    @relation(fields: [drawId], references: [id], onDelete: Cascade)
}

// Wire should be constructed of some fibers (logically at least one fiber should be in a wire)
model WireFiber {
  id      String @id @default(cuid())
  count   Int
  wireId  String
  wire    Wire   @relation(fields: [wireId], references: [id], onDelete: Cascade)
  fiberId String
  fiber   Fiber  @relation(fields: [fiberId], references: [id], onDelete: Cascade)
}

// Fiber is a base for a wire; the wire could be made of several fibers (like claptons or so)
model Fiber {
  id         String  @id @default(cuid())
  code       String  @unique
  // Thickness of a fiber in mm (for example 0.3 or something; should be rounded)
  mm         Float
  // Thickness of a fiber
  ga         Int
  materialId String
  material   Tag     @relation(fields: [materialId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  WireFiber WireFiber[]

  @@unique([ga, materialId])
}

// Certificate is kind of grouped ACL tokens tokens; it's the highest possible thing a user can acquire
// In general - it gives permanent rights (tokens) in opposite to a License which could be temporary
model Certificate {
  id   String @id @default(cuid())
  // name goes through translation
  name String @unique
  // code as usueal
  code String @unique

  CertificateToken       CertificateToken[]
  UserCertificate        UserCertificate[]
  UserCertificateRequest UserCertificateRequest[]
}

model CertificateToken {
  id            String      @id @default(cuid())
  certificateId String
  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
  tokenId       String
  token         Token       @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([certificateId, tokenId])
}

model UserCertificate {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateId String
  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)

  UserCertificateRequest UserCertificateRequest[]

  @@unique([userId, certificateId])
}

model UserCertificateRequest {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation("UserCertificateRequestUser", fields: [userId], references: [id], onDelete: Cascade)
  certificateId     String
  certificate       Certificate      @relation(fields: [certificateId], references: [id], onDelete: Cascade)
  approverId        String?
  approver          User?            @relation("UserCertificateRequestApprover", fields: [approverId], references: [id], onDelete: Cascade)
  userCertificateId String?
  userCertificate   UserCertificate? @relation(fields: [userCertificateId], references: [id], onDelete: Cascade)
  // null - pending; 0, 1 are obvious
  status            Int?
  created           DateTime
  updated           DateTime?

  @@unique([userId, certificateId])
}

// License is basically the same as Certificate, but for "Common humans"; acquire licence could be quite common
// as there are only for short time.
model License {
  id       String @id @default(cuid())
  name     String @unique
  code     String @unique
  // if provided, License could be renewed (on an user action)
  renew    Float?
  // if provided, automatically creates licence with duration (from time it's bought + "duration" days)
  duration Int?

  LicenseToken       LicenseToken[]
  UserLicense        UserLicense[]
  UserLicenseRequest UserLicenseRequest[]
}

model LicenseToken {
  id        String  @id @default(cuid())
  licenseId String
  license   License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  tokenId   String
  token     Token   @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([licenseId, tokenId])
}

model UserLicense {
  id        String    @id @default(cuid())
  from      DateTime?
  to        DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseId String
  license   License   @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  UserLicenseRequest UserLicenseRequest[]

  @@unique([userId, licenseId])
}

model UserLicenseRequest {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation("UserLicenseRequestUser", fields: [userId], references: [id], onDelete: Cascade)
  licenseId     String
  license       License      @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  approverId    String?
  approver      User?        @relation("UserLicenseRequestApprover", fields: [approverId], references: [id], onDelete: Cascade)
  userLicenseId String?
  userLicense   UserLicense? @relation(fields: [userLicenseId], references: [id], onDelete: Cascade)
  // null - pending; 0, 1 are obvious
  status        Int?
  created       DateTime
  updated       DateTime?

  @@unique([userId, licenseId])
}

model Wishlist {
  id      String   @id @default(cuid())
  // name of the wanted thing
  name    String
  // optional url where to find that thing
  url     String?
  // optional cost of the thing in user's native currency (this value is user-centric, so it has a meaning for him)
  cost    Float?
  // note about the whish list item
  note    String?  @db.Text
  userId  String
  sort    Int?
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created DateTime

  WishlistTag WishlistTag[]
}

model WishlistTag {
  id         String   @id @default(cuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, tagId])
}
